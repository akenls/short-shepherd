---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "‰∏Ä‰∏™ÁÆÄÊ¥ÅÁöÑÂçöÂÆ¢Ôºå‰∏ìÊ≥®‰∫éÂÜÖÂÆπÊú¨Ë∫´" } = Astro.props;
---

<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <style>
      :root {
        --bg-color: #ffffff;
        --text-color: #1a1a1a;
        --text-secondary: #666666;
        --border-color: #e5e5e5;
        --accent-color: #0066cc;
        --hover-color: #0052a3;
        --max-width: 768px;
        --font-mono: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
        --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
      }

      [data-theme="dark"] {
        --bg-color: #0a0a0a;
        --text-color: #fafafa;
        --text-secondary: #a1a1aa;
        --border-color: #27272a;
        --accent-color: #3b82f6;
        --hover-color: #60a5fa;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: var(--font-sans);
        background-color: var(--bg-color);
        color: var(--text-color);
        line-height: 1.7;
        font-size: 16px;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      .container {
        max-width: var(--max-width);
        margin: 0 auto;
        padding: 0 2rem;
      }

      .header {
        padding: 2rem 0;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 3rem;
      }

      .nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .logo {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-color);
        text-decoration: none;
        transition: color 0.2s ease;
      }

      .logo:hover {
        color: var(--accent-color);
      }

      .nav-links {
        display: flex;
        gap: 2rem;
        align-items: center;
      }

      .nav-link {
        color: var(--text-secondary);
        text-decoration: none;
        transition: color 0.2s ease;
      }

      .nav-link:hover {
        color: var(--text-color);
      }

      .theme-toggle {
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        font-size: 1.2rem;
        transition: color 0.2s ease;
      }

      .theme-toggle:hover {
        color: var(--text-color);
      }

      .main {
        min-height: calc(100vh - 200px);
      }

      .footer {
        padding: 2rem 0;
        margin-top: 4rem;
        border-top: 1px solid var(--border-color);
        text-align: center;
        color: var(--text-secondary);
        font-size: 0.875rem;
      }

      @media (max-width: 768px) {
        .container {
          padding: 0 1rem;
        }
        
        .header {
          padding: 1.5rem 0;
          margin-bottom: 2rem;
        }
        
        .nav-links {
          gap: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header class="header">
        <nav class="nav">
          <a href="/" class="logo">Blog</a>
          <div class="nav-links">
            <a href="/" class="nav-link">ÊñáÁ´†</a>
            <a href="/about" class="nav-link">ÂÖ≥‰∫é</a>
            <button class="theme-toggle" id="theme-toggle" aria-label="ÂàáÊç¢‰∏ªÈ¢ò">
              üåô
            </button>
          </div>
        </nav>
      </header>
      
      <main class="main">
        <slot />
      </main>
      
      <footer class="footer">
        <p>¬© 2024 ÁÆÄÁ∫¶ÂçöÂÆ¢. ‰∏ìÊ≥®‰∫éÂÜÖÂÆπÊú¨Ë∫´</p>
      </footer>
    </div>

    <script>
      const themeToggle = document.getElementById('theme-toggle');
      const html = document.documentElement;
      
      // Ê£ÄÊü•Êú¨Âú∞Â≠òÂÇ®ÁöÑ‰∏ªÈ¢òÂÅèÂ•Ω
      const savedTheme = localStorage.getItem('theme') || 'light';
      html.setAttribute('data-theme', savedTheme);
      updateThemeIcon(savedTheme);
      
      themeToggle?.addEventListener('click', () => {
        const currentTheme = html.getAttribute('data-theme') || 'light';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        html.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
      });
      
      function updateThemeIcon(theme: string) {
        if (themeToggle) {
          themeToggle.textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
        }
      }
    </script>
  </body>
</html>